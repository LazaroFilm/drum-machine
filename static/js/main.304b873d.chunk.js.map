{"version":3,"sources":["features/counter/counterSlice.js","Display.js","DrumPad.js","App.js","app/store.js","serviceWorker.js","index.js","features/counter/Counter.module.css"],"names":["counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","Display","text","Navbar","bg","expand","Brand","Alert","variant","id","this","Component","connect","pads","Q","sound","url","W","E","A","S","D","Z","X","C","DrumPad","padName","Col","className","Button","type","onClick","handleClick","src","e","target","audioClip","document","getElementById","console","log","load","play","Container","Row","makeButton","App","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"oPAEaA,EAAeC,YAAY,CACtCC,KAAM,UACNC,aAAc,CACZC,MAAO,GAETC,SAAU,CACRC,UAAW,SAAAC,GAKTA,EAAMH,OAAS,GAEjBI,UAAW,SAAAD,GACTA,EAAMH,OAAS,GAEjBK,kBAAmB,SAACF,EAAOG,GACzBH,EAAMH,OAASM,EAAOC,Y,EAK+BX,EAAaY,QAiBzDZ,G,EAjBAM,U,EAAWE,U,EAAWC,kBAiBtBT,EAAf,S,6DCjCMa,E,4MACJN,MAAQ,CACNO,KAAM,gB,uDAGN,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,0BACA,kBAACC,EAAA,EAAD,CAAOC,QAAQ,UAAUC,GAAG,WACzBC,KAAKf,MAAMO,W,GATAS,aAgBPC,eApBf,SAAyBjB,GACvB,MAAO,KAmBMiB,CAAyBX,G,gCChBxC,IAAMY,EAAO,CACXC,EAAG,CACDC,MAAM,UACNC,IAAK,2DAEPC,EAAG,CACDF,MAAM,UACNC,IAAK,2DAEPE,EAAG,CACDH,MAAM,UACNC,IAAK,2DAEPG,EAAG,CACDJ,MAAM,SACNC,IAAK,mEAEPI,EAAG,CACDL,MAAM,UACNC,IAAK,2DAEPK,EAAG,CACDN,MAAM,YACNC,IAAK,0DAEPM,EAAG,CACDP,MAAM,cACNC,IAAK,iEAEPO,EAAG,CACDR,MAAM,aACNC,IAAK,gEAEPQ,EAAG,CACDT,MAAM,QACNC,IAAK,4DAIHS,E,yKACOC,GACT,OACE,kBAACC,EAAA,EAAD,CAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CACED,UAAU,WACVnB,GAAIiB,EACJlB,QAAQ,gCACRsB,KAAK,SACLC,QAASrB,KAAKsB,aAEbN,EACD,2BACEE,UAAU,OACVnB,GAAE,mBAAciB,GAChBO,IAAKpB,EAAKa,GAASV,IACnBc,KAAK,mB,kCAOHI,GACV,IAAMR,EAAUQ,EAAEC,OAAO1B,GACnB2B,EAAYC,SAASC,eAAT,mBAAoCZ,IACtDa,QAAQC,IAAR,UAAed,EAAf,cACAU,EAAUK,OACVL,EAAUM,S,+BAIV,OACE,6BACE,6BACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGlC,KAAKmC,WAAW,KAChBnC,KAAKmC,WAAW,KAChBnC,KAAKmC,WAAW,MAEnB,kBAACD,EAAA,EAAD,KACGlC,KAAKmC,WAAW,KAChBnC,KAAKmC,WAAW,KAChBnC,KAAKmC,WAAW,MAEnB,kBAACD,EAAA,EAAD,KACGlC,KAAKmC,WAAW,KAChBnC,KAAKmC,WAAW,KAChBnC,KAAKmC,WAAW,Y,GAjDPlC,aAyDPC,eApGf,SAAyBjB,GACvB,MAAO,KAmGMiB,CAAyBa,GCxFzBqB,MATf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCRSmB,G,MAAAA,YAAe,CAC5BC,QAAS,CACPC,QAASC,MCOOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,EAAOlD,GAAG,gBACzB,kBAAC,EAAD,QAGJ4B,SAASC,eAAe,SDoHpB,kBAAmBsB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBEpInBC,EAAOC,QAAU,CAAC,IAAM,qBAAqB,MAAQ,uBAAuB,OAAS,wBAAwB,QAAU,yBAAyB,YAAc,sD","file":"static/js/main.304b873d.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Alert, Navbar } from \"react-bootstrap\";\n\nfunction mapStateToProps(state) {\n  return {};\n}\n\nclass Display extends Component {\n  state = {\n    text: \"Initial text\",\n  };\n  render() {\n    return (\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand>Dr(u/ea)m Machine</Navbar.Brand>\n        <Alert variant=\"primary\" id=\"display\">\n          {this.state.text}\n        </Alert>\n      </Navbar>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(Display);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Container, Row, Col } from \"react-bootstrap\";\n\nfunction mapStateToProps(state) {\n  return {};\n}\n\nconst pads = {\n  Q: {\n    sound: `Chord 1`,\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3\",\n  },\n  W: {\n    sound: `Chord 2`,\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3\",\n  },\n  E: {\n    sound: `Chord 3`,\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3\",\n  },\n  A: {\n    sound: `Shaker`,\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3\",\n  },\n  S: {\n    sound: `Open HH`,\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3\",\n  },\n  D: {\n    sound: `Closed HH`,\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3\",\n  },\n  Z: {\n    sound: `Punchy Kick`,\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3\",\n  },\n  X: {\n    sound: `Side Stick`,\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3\",\n  },\n  C: {\n    sound: `Snare`,\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3\",\n  },\n};\n\nclass DrumPad extends Component {\n  makeButton(padName) {\n    return (\n      <Col className=\"p-1\">\n        <Button\n          className=\"drum-pad\"\n          id={padName}\n          variant=\"primary btn-lg btn-block py-5\"\n          type=\"submit\"\n          onClick={this.handleClick}\n        >\n          {padName}\n          <audio\n            className=\"clip\"\n            id={`audioClip${padName}`}\n            src={pads[padName].url}\n            type=\"audio/mpeg\"\n          ></audio>\n        </Button>\n      </Col>\n    );\n  }\n\n  handleClick(e) {\n    const padName = e.target.id;\n    const audioClip = document.getElementById(`audioClip${padName}`);\n    console.log(`${padName} clicked!`);\n    audioClip.load();\n    audioClip.play();\n  }\n\n  render() {\n    return (\n      <div>\n        <br />\n        <Container>\n          <Row>\n            {this.makeButton(\"Q\")}\n            {this.makeButton(\"W\")}\n            {this.makeButton(\"E\")}\n          </Row>\n          <Row>\n            {this.makeButton(\"A\")}\n            {this.makeButton(\"S\")}\n            {this.makeButton(\"D\")}\n          </Row>\n          <Row>\n            {this.makeButton(\"Z\")}\n            {this.makeButton(\"X\")}\n            {this.makeButton(\"C\")}\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(DrumPad);\n","import React from \"react\";\r\n// import logo from './logo.svg';\r\nimport { Counter } from \"./features/counter/Counter\";\r\n// import \"./App.css\";\r\nimport Display from \"./Display\";\r\nimport DrumPad from \"./DrumPad\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Display />\r\n      <DrumPad />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store} id=\"drum-machine\">\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__1C_4f\",\"value\":\"Counter_value__1d0te\",\"button\":\"Counter_button__1xpSV\",\"textbox\":\"Counter_textbox__3ODaX\",\"asyncButton\":\"Counter_asyncButton__2UAr3 Counter_button__1xpSV\"};"],"sourceRoot":""}